import { CmsModel, CmsContext, CmsFieldTypePlugins, ApiEndpoint } from "~/types";
import { GraphQLSchemaDefinition } from "@webiny/handler-graphql/types";

interface RenderTypesFromFieldPluginsParams {
    models: CmsModel[];
    fieldTypePlugins: CmsFieldTypePlugins;
    type: ApiEndpoint;
}
interface RenderTypesFromFieldPlugins {
    (params: RenderTypesFromFieldPluginsParams): GraphQLSchemaDefinition<CmsContext>[];
}

const TYPE_MAP: Record<string, "manage" | "read"> = {
    preview: "read",
    read: "read",
    manage: "manage"
};

export const getSchemaFromFieldPlugins: RenderTypesFromFieldPlugins = ({
    models,
    fieldTypePlugins,
    type
}) => {
    return Object.values(fieldTypePlugins)
        .map(plugin => {
            if (!TYPE_MAP[type] || !plugin[TYPE_MAP[type]]) {
                return null;
            }
            const createSchema = plugin[TYPE_MAP[type]].createSchema;
            // Render gql types generated by field type plugins
            if (!createSchema) {
                return null;
            }
            return createSchema({ models });
        })
        .filter(Boolean) as GraphQLSchemaDefinition<CmsContext>[];
};
